#!/usr/bin/env python3
# -*- Mode: Python -*-

import argparse
import os.path
import pexpect
import sys

DEFAULT_CPUS = 4
DEFAULT_MEM = 512

QEMU = "qemu-system-x86_64"
QEMU_DEFAULT_ARGS = [
    "-machine",
    "q35,accel=tcg",
    # Disable features that TCG doesn't support to avoid ugly warnings
    # in the test.
    "-cpu",
    "IvyBridge,-x2apic,-avx,-tsc-deadline,-f16c",
    "-m",
    "2048",
    "-serial",
    "stdio",
    "-net",
    "none",
    "-display",
    "none",
    "-no-reboot",
]


def test_hypervisor(qemu, args, expect_multiboot_version, expect_cpus):
    """
    Run qemu with the specified flags and check whether Hedron is booted
    correctly.

    The expect_multiboot_version parameter specifies which multiboot
    version we expect Hedron to come up with (1 or 2).

    The expect_cpus parameter specifies how many CPUs need to check
    in.
    """

    assert expect_multiboot_version in [1, 2]

    child = pexpect.spawn(qemu, args, encoding="utf-8")
    child.logfile = sys.stdout

    # Workaround for https://github.com/pexpect/pexpect/issues/462
    child.delayafterterminate = 1

    child.expect(
        r"Hedron Microhypervisor.*\[MB{}\]".format(str(expect_multiboot_version)),
        # This can be extremely slow on a busy host.
        timeout=120,
    )

    for cpu in range(expect_cpus):
        child.expect(r"CORE:", timeout=5)

    child.expect(r"Killed EC:.*\(No ELF\)", timeout=5)
    child.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Boot the hypervisor in Qemu",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument("hypervisor", help="The hypervisor binary or disk image.")

    parser.add_argument(
        "--disk-image",
        action="store_true",
        default=False,
        help="The specified hypervisor is a disk image instead of an ELF.",
    )

    parser.add_argument(
        "--uefi",
        action="store_true",
        default=False,
        help="Boot in UEFI mode instead of legacy BIOS mode.",
    )

    parser.add_argument(
        "--uefi-firmware-path",
        default="/usr/share/OVMF",
        help="Specify the path to the UEFI firmware files.",
    )

    parser.add_argument(
        "--memory",
        type=int,
        default=DEFAULT_MEM,
        help="The amount of memory in MiB to give to the VM.",
    )

    args = parser.parse_args()

    qemu_args = QEMU_DEFAULT_ARGS
    qemu_args += ["-smp", str(DEFAULT_CPUS), "-m", str(args.memory)]

    if args.disk_image:
        qemu_args += [
            "-drive",
            "format=raw,snapshot=on,file={}".format(args.hypervisor),
        ]
    else:
        qemu_args += ["-kernel", args.hypervisor, "-append", "serial"]

    if args.uefi:
        ovmf_code = os.path.join(args.uefi_firmware_path, "OVMF_CODE.fd")
        ovmf_data = os.path.join(args.uefi_firmware_path, "OVMF_VARS.fd")

        if not (os.path.exists(ovmf_code) and os.path.exists(ovmf_data)):
            print(
                "OVMF_CODE.fd or OVMF_VARS.fd not found in {}".format(
                    args.uefi_firmware_path
                ),
                file=sys.stderr,
            )
            sys.exit(1)

        qemu_args += [
            "-drive",
            "if=pflash,format=raw,readonly=on,file={}".format(ovmf_code),
            "-drive",
            "if=pflash,format=raw,readonly=on,file={}".format(ovmf_data),
        ]

    try:
        test_hypervisor(
            QEMU,
            qemu_args,
            expect_multiboot_version=2 if args.disk_image else 1,
            expect_cpus=DEFAULT_CPUS,
        )
        print("\nTest completed successfully.")
        sys.exit(0)
    except pexpect.TIMEOUT:
        print("Timed out during test.", file=sys.stderr)
        sys.exit(1)
    except pexpect.EOF:
        print("Got EOF from qemu during test.", file=sys.stderr)
        sys.exit(1)

/*
 * Entry Functions
 *
 * Copyright (C) 2009-2011 Udo Steinberg <udo@hypervisor.org>
 * Economic rights: Technische Universitaet Dresden (Germany)
 *
 * Copyright (C) 2012 Udo Steinberg, Intel Corporation.
 * Copyright (C) 2015 Alexander Boettcher, Genode Labs GmbH
 * Copyright (C) 2019 Julian Stecklina, Cyberus Technology GmbH.
 *
 * This file is part of the Hedron microhypervisor.
 *
 * Hedron is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * Hedron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License version 2 for more details.
 *
 */

#include "arch.hpp"
#include "hazards.hpp"
#include "memory.hpp"
#include "selectors.hpp"
#include "vectors.hpp"

.data
.global                 handlers
handlers:

.text

.macro                  INTRGATE DPL
                        .align  4, 0x90
1:                      .data
                         WORD   1b + \DPL
                        .previous
.endm

.macro                  TASKGATE
                        .data
                         WORD   0
                        .previous
.endm

.macro                  RESTORE_STACK
                        mov     %gs:0, %rsp // Per_cpu::self
.endm

.macro                  SAVE_STATE
                        // RSP must point to the _end_ of a Sys_regs structure.
                        SAVE_GPR
                        mov     %rsp, %rbx
                        cld

                        // If CS[1:0] != 0, we come from userspace.
                        testb   $0x3, OFS_CS(%rsp)
                        jz      1f
                        swapgs
                        RESTORE_STACK
1:
.endm

.macro                  EXCEPTION VEC, DPL
INTRGATE                \DPL
                        push    $\VEC
                        jmp     entry_exc
.endm

.macro                  EXCEPTION_ERROR VEC, DPL
INTRGATE                \DPL
                        push    (%rsp)
                        movq    $\VEC, 8(%rsp)
                        jmp     entry_exc_error
.endm

/*
 * Exception Entries
 */
entry_exc:              push    $0
entry_exc_error:        SAVE_STATE
                        mov     %cr2, %rax
                        mov     %rax, OFS_CR2 (%rbx)
                        mov     %rbx, %ARG_1
                        call    exc_handler
                        jmp     ret_from_interrupt

EXCEPTION               0x0,    0
EXCEPTION               0x1,    0
TASKGATE
EXCEPTION               0x3,    3
EXCEPTION               0x4,    3
EXCEPTION               0x5,    0
EXCEPTION               0x6,    0
EXCEPTION               0x7,    0
TASKGATE
TASKGATE
EXCEPTION_ERROR         0xa,    0
EXCEPTION_ERROR         0xb,    0
EXCEPTION_ERROR         0xc,    0
EXCEPTION_ERROR         0xd,    0
EXCEPTION_ERROR         0xe,    0
TASKGATE
EXCEPTION               0x10,   0
EXCEPTION_ERROR         0x11,   0
EXCEPTION               0x12,   0
EXCEPTION               0x13,   0
.rept                   NUM_EXC - 0x14
TASKGATE
.endr

/*
 * GSI Entries
 */
.set                    VEC, NUM_EXC
.rept                   NUM_GSI
INTRGATE                0
                        push    $VEC
                        jmp     entry_gsi
.set                    VEC, VEC + 1
.endr

entry_gsi:              push    $0
                        SAVE_STATE
                        mov     OFS_VEC (%rbx), %ARG_1
                        call    gsi_vector
                        jmp     ret_from_interrupt

/*
 * LVT Entries
 */
.rept                   NUM_LVT
INTRGATE                0
                        push    $VEC
                        jmp     entry_lvt
.set                    VEC, VEC + 1
.endr

entry_lvt:              push    $0
                        SAVE_STATE
                        mov     OFS_VEC (%rbx), %ARG_1
                        call    lvt_vector
                        jmp     ret_from_interrupt

/*
 * MSI Entries
 */
.rept                   NUM_MSI
INTRGATE                0
                        push    $VEC
                        jmp     entry_msi
.set                    VEC, VEC + 1
.endr

entry_msi:              push    $0
                        SAVE_STATE
                        mov     OFS_VEC (%rbx), %ARG_1
                        call    msi_vector
                        jmp     ret_from_interrupt

/*
 * IPI Entries
 */
.rept                   NUM_IPI
INTRGATE                0
                        push    $VEC
                        jmp     entry_ipi
.set                    VEC, VEC + 1
.endr

entry_ipi:              push    $0
                        SAVE_STATE
                        mov     OFS_VEC (%rbx), %ARG_1
                        call    ipi_vector
                        jmp     ret_from_interrupt

/*
 * Interrupt Return
 */
ret_from_interrupt:     testb   $3, OFS_CS (%rbx)
                        jnz     ret_user_iret
                        LOAD_GPR
                        add     $(2 * PTR_SIZE), %rsp
                        iretq

/*
 * System-Call Entry
 */
.align                  4, 0x90
.globl                  entry_sysenter
entry_sysenter:

                        /*
                         * Syscall saves userspace RFLAGS in R11, but we do not
                         * need to save it, because we just set a default value when
                         * returning. This leaves R11 free to save the user RSP.
                         */
                        mov     %rsp, %r11

                        swapgs
                        mov     %gs:8, %rsp // Per_cpu::sys_entry_stack
                        SAVE_GPR
                        RESTORE_STACK
                        jmp     syscall_handler

/*
 * VMX Entry
 *
 * The stack pointer points just behind a Sys_regs structure, so the guest state
 * can be pushed into it without using additional registers.
 *
 * In case of VMRESUME/VMLAUNCH failure, we skip saving guest registers, because
 * they cannot have been changed and just restore the stack.
 */
.align                  4, 0x90
.globl                  entry_vmx
.globl                  entry_vmx_failure
entry_vmx:              SAVE_GPR
                        mov     %cr2, %rax
                        mov     %rax, OFS_CR2 (%rsp)
entry_vmx_failure:      RESTORE_STACK
                        jmp     vmx_handler
